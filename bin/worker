const amqp = require('amqplib');
const { getGamesData } = require('../src/scrape');
const { getFirstIncompleteRound, insertRound } = require('../src/store');
const terminate = require('../src/terminate');

require('dotenv').config();

const { RABBITMQ_URL, QUEUE_NAME } = process.env;

function handleTerminate(closeMqConnection) {
    closeMqConnection();
    terminate();
}

async function handleMessage(ch, msg) {
    try {
        const body = JSON.parse(msg.content);
        console.info('Received message with content: ', body);

        switch (body.cmd) {
            case 'scrape': {
                await scrape(body);
                break;
            }
            default: {
                throw Error(
                    'Received unknown command: ' + JSON.stringify(body)
                );
            }
        }

        ch.ack(msg);
    } catch (err) {
        console.error(err);
        ch.reject(msg);
    }
}

async function scrape({ league, season }) {
    const firstIncompleteRound = await getFirstIncompleteRound();
    let currentRound = firstIncompleteRound ? firstIncompleteRound.round : 1;
    let currentRoundGames = null;
    do {
        console.info(`Scraping round ${currentRound}...`);
        currentRoundGames = await getGamesData(league, season, currentRound);
        if (currentRoundGames !== null) {
            console.info(`Successfully scraped ${currentRound}`);
            await insertRound(
                league,
                season,
                String(currentRound),
                currentRoundGames
            );
            console.info(`Successfully stored ${currentRound}`);
            ++currentRound;
        } else {
            console.info('No such round!');
        }
    } while (currentRoundGames !== null);
}

async function doWork() {
    const conn = await amqp.connect(RABBITMQ_URL);
    const terminate = handleTerminate.bind(null, conn.close.bind(conn));

    process.on('SIGTERM', terminate);
    process.on('SIGINT', terminate);

    const ch = await conn.createChannel();
    await ch.assertQueue(QUEUE_NAME, { durable: true });
    await ch.prefetch(1);
    await ch.consume(QUEUE_NAME, handleMessage.bind(null, ch));
}

doWork().catch(async err => {
    console.error(err);
    await terminate(1);
});
